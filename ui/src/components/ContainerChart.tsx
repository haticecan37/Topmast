import React, { useEffect, useRef } from 'react';

import { useAppContext } from '../context/AppContext';

import {
  Typography,
  Toolbar,
  Button,
  ButtonGroup,
  Box
} from '@mui/material';

import {
  Chart as ChartJS,
  CategoryScale,
  TimeScale,
  LinearScale,
  BarElement,
  ArcElement,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';

// import individual components to save space
import { Bar, Doughnut, Line } from 'react-chartjs-2';

import Chart from 'chart.js/auto';

// (async function testChart() {
//   const data = [
//     { year: 2010, count: 10 },
//     { year: 2011, count: 20 },
//     { year: 2012, count: 15 },
//     { year: 2013, count: 25 },
//     { year: 2014, count: 22 },
//     { year: 2015, count: 30 },
//     { year: 2016, count: 28 },
//   ];

//   const canvas = document.getElementById('vcc') as HTMLCanvasElement;
//   if (canvas) {
//     let ctx = canvas.getContext('2d');
//     if (ctx) {
//       new Chart(ctx, {
//         type: 'bar',
//         data: {
//           labels: data.map((row) => row.year),
//           datasets: [
//             {
//               label: 'Acquisitions by year',
//               data: data.map((row) => row.count),
//             },
//           ],
//         },
//       });
//     }
//   }
// })();

// FAKER FOR DEV TESTING Data
import { faker } from '@faker-js/faker';

ChartJS.register(
  CategoryScale,
  TimeScale,
  LinearScale,
  BarElement,
  ArcElement,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const ContainerChart = () => {
  const { currentContainer, containers, stats } = useAppContext();

  // ## Chart Demo Data ##
  const barOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'top' as const,
      },
      title: {
        display: true,
        text: 'Archived Container Data',
      },
    },
  };

  const labels = [
    '0',
  ];

  // bar chart data, generated by faker
  const barData = {
    labels: [
      'January',
      'February',
      'March',
      'April',
      'May',
    ],
    datasets: [
      {
        label: 'CPU Max',
        // data: [120, 190, 300, 500, 900, 350, 200],
        data: labels.map(() => faker.datatype.number({ min: 0, max: 30 })),
        backgroundColor: 'rgba(255, 99, 132, 0.5)',
      },
      {
        label: 'MEM Max',
        data: labels.map(() => faker.datatype.number({ min: 0, max: 30 })),
        backgroundColor: 'rgba(53, 162, 235, 0.5)',
      },
    ],
  };
  const doughOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'top' as const,
      },
      title: {
        display: true,
        text: 'Total Docker Memory Usage',
      },
    },
  };

  const doughData = {
    // labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
    labels: ['Used', 'Other Containers', 'Available'],
    datasets: [
      {
        // label: '# of Things',
        data: [10,30,60],
        // labels.map(() => faker.datatype.number({ min: 1, max: 100 })),
        backgroundColor: [
          'rgba(255, 99, 132, 0.2)',
          'rgba(255, 206, 86, 0.2)',
          'rgba(54, 162, 235, 0.2)',
        ],
        borderColor: [
          'rgba(255, 99, 132, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(54, 162, 235, 1)',
        ],
        borderWidth: 1,
      },
    ],
  };

  const lineOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'top' as const,
      },
      title: {
        display: true,
        text: 'Memory Usage',
      },
    },
    options: {
      scales: {
        x: {
          type: 'timeseries',
          time: {
            unit: 'hour',
          },
        },
      },
    },
  };

  // line chart data, generated by faker
  const lineData = {
    labels,
    datasets: [
      {
        label: 'percentage used',
        data: [0],
        // data: labels.map(() => faker.datatype.number({ min: 0, max: 100 })),
        backgroundColor: 'rgba(255, 99, 132, 0.9)',
        borderColor: 'rgba(53, 162, 235, 0.3)',
      },
    ],
  };

  // ## end chart demo data

  // create a ref to the chart.js instance
  // works without types, but these have been suggested:
  const lineChartRef = useRef<ChartJS<'line', number[], string>>(null);
  // const lineChartRef = useRef();
  const barChartRef = useRef();

  useEffect(() => {
    const interval = setInterval(() => {
      // get the chart.js instance
      const chart = lineChartRef.current;
      // generate new data
      const newLabel = (Math.random() + 1).toString(36).substring(7);
      const newData = Math.floor(Math.random() * (50 - 1 + 1)) + 1;
      console.log('*******', chart, newData);
      // push new data
      chart.data.labels.push(newLabel);
      chart.data.datasets[0].data.push(newData);
      // update rendered chart
      chart.update();
    }, 1000); // Change interval to 30000 milliseconds (30 seconds)

    // Cleanup interval on component unmount
    return () => clearInterval(interval);
  }, []);

  return (
    <>

      <div
        style={{
          position: 'relative',
          height: '20vh',
          width: '80vw',
          margin: 'auto',
        }}
      >
        <Line
          id="r2Line"
          ref={lineChartRef}
          options={lineOptions}
          data={lineData}
        />
      </div>

      <Box>


      </Box>

      <div
        style={{
          position: 'relative',
          height: '20vh',
          width: '90vw',
          margin: 'auto',
        }}
      >
        <Bar ref={barChartRef} options={barOptions} data={barData} />
      </div>

      <Box style={{ position: 'relative', height: '40vw', width: '90vh' }}>
        <Doughnut data={doughData} />
      </Box>
    </>
  );
};

export default ContainerChart;
